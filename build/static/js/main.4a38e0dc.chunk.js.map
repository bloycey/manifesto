{"version":3,"sources":["pages/Home.js","pages/Manifesto.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","state","linkToManifesto","getShortUrl","longUrl","a","url","process","data","fetch","method","body","JSON","stringify","headers","response","json","console","log","error","handleSubmit","e","preventDefault","title","compress","titleInput","current","value","text","textInput","window","location","hostname","setState","React","createRef","this","onSubmit","type","ref","name","id","cols","rows","href","Component","Manifesto","match","params","split","decompressedTitle","decompress","decompressedText","App","exact","path","component","Boolean","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+TA4EeA,E,YAxEd,WAAYC,GAAQ,IAAD,8BAClB,4CAAMA,KAKPC,MAAQ,CACPC,gBAAiB,MAPC,EAUnBC,YAVmB,uCAUL,WAAOC,GAAP,qBAAAC,EAAA,6DACPC,EADO,wEACgEC,2CACvEC,EAAO,CACZ,gBAAmBJ,EACnB,OAAU,CACR,OAAU,UALA,kBAUWK,MAAMH,EAAK,CACjCI,OAAQ,OACRC,KAAMC,KAAKC,UAAUL,GACrBM,QAAS,CACR,eAAgB,sBAdN,cAUNC,EAVM,gBAiBOA,EAASC,OAjBhB,OAiBNA,EAjBM,OAkBZC,QAAQC,IAAI,WAAYN,KAAKC,UAAUG,IAlB3B,kDAoBZC,QAAQE,MAAM,SAAd,MApBY,0DAVK,wDAkCnBC,aAAe,SAAAC,GACdA,EAAEC,iBACF,IAAMC,EAAQC,wCAAS,EAAKC,WAAWC,QAAQC,OACzCC,EAAOJ,wCAAS,EAAKK,UAAUH,QAAQC,OACvCzB,EAAe,UAAM4B,OAAOC,SAASC,SAAtB,iBAAuCT,EAAvC,aAAiDK,GACtE,EAAKzB,YAAYD,GACjB,EAAK+B,SAAS,CACb/B,qBAvCD,EAAKuB,WAAaS,IAAMC,YACxB,EAAKN,UAAYK,IAAMC,YAHL,E,sEA+CT,IACDjC,EAAoBkC,KAAKnC,MAAzBC,gBACR,OACC,6BACC,yCAAeK,2CACf,0BAAM8B,SAAUD,KAAKhB,cACpB,wCACA,2BAAOkB,KAAK,OAAOC,IAAKH,KAAKX,aAC7B,6BACA,uCACA,8BAAUe,KAAK,GAAGC,GAAG,GAAGC,KAAK,KAAKC,KAAK,KAAKJ,IAAKH,KAAKP,YAEtD,6BACA,4BAAQS,KAAK,UAAb,WAEApC,GACA,6BACC,uBAAG0C,KAAM1C,GAAkBA,S,GAjEd2C,a,cCcJC,MAbf,SAAmB9C,GAAQ,IAAD,EACRA,EAAM+C,MAAMC,OAArBxC,KACmByC,MAAM,MAFR,mBAElB1B,EAFkB,KAEXK,EAFW,KAGnBsB,EAAoBC,4CAAW5B,GAC/B6B,EAAmBD,4CAAWvB,GACpC,OACC,6BACC,2BAAIsB,GACJ,2BAAIE,KCSQC,MAXf,WACC,OACC,kBAAC,IAAD,KACC,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWzD,IACjC,kBAAC,IAAD,CAAOwD,KAAK,SAASC,UAAWV,OCHhBW,QACW,cAA7B3B,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASe,MACvB,2DCZNW,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4a38e0dc.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { compressToEncodedURIComponent as compress } from \"lz-string\";\r\n\r\nclass Home extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.titleInput = React.createRef();\r\n\t\tthis.textInput = React.createRef();\r\n\t}\r\n\r\n\tstate = {\r\n\t\tlinkToManifesto: null\r\n\t}\r\n\r\n\tgetShortUrl = async (longUrl) => {\r\n\t\tconst url = `https://firebasedynamiclinks.googleapis.com/v1/shortLinks?key=${process.env.REACT_APP_FIREBASE_API}`;\r\n\t\tconst data = {\r\n\t\t\t\"longDynamicLink\": longUrl,\r\n\t\t\t\"suffix\": {\r\n\t\t\t  \"option\": \"SHORT\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(url, {\r\n\t\t\t\tmethod: 'POST', // or 'PUT'\r\n\t\t\t\tbody: JSON.stringify(data), // data can be `string` or {object}!\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tconst json = await response.json();\r\n\t\t\tconsole.log('Success:', JSON.stringify(json));\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error('Error:', error);\r\n\t\t}\r\n\t}\r\n\r\n\thandleSubmit = e => {\r\n\t\te.preventDefault();\r\n\t\tconst title = compress(this.titleInput.current.value);\r\n\t\tconst text = compress(this.textInput.current.value);\r\n\t\tconst linkToManifesto = `${window.location.hostname}:3000/${title}__${text}`\r\n\t\tthis.getShortUrl(linkToManifesto);\r\n\t\tthis.setState({\r\n\t\t\tlinkToManifesto\r\n\t\t})\r\n\t}\r\n\r\n\r\n\r\n\trender() {\r\n\t\tconst { linkToManifesto } = this.state;\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<p>API key is {process.env.REACT_APP_FIREBASE_API}</p>\r\n\t\t\t\t<form onSubmit={this.handleSubmit}>\r\n\t\t\t\t\t<label>Title</label>\r\n\t\t\t\t\t<input type=\"text\" ref={this.titleInput}/>\r\n\t\t\t\t\t<br/>\r\n\t\t\t\t\t<label>Text</label>\r\n\t\t\t\t\t<textarea name=\"\" id=\"\" cols=\"30\" rows=\"10\" ref={this.textInput}>\r\n\t\t\t\t\t</textarea>\r\n\t\t\t\t\t<br/>\r\n\t\t\t\t\t<button type=\"submit\">Submit</button>\r\n\t\t\t\t</form>\r\n\t\t\t\t{linkToManifesto &&\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<a href={linkToManifesto}>{linkToManifesto}</a>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Home;","import React from \"react\";\r\nimport \"./Manifesto.css\";\r\nimport { decompressFromEncodedURIComponent as decompress } from \"lz-string\";\r\n\r\nfunction Manifesto(props) {\r\n\tconst { data } = props.match.params;\r\n\tconst [title, text] = data.split(\"__\");\r\n\tconst decompressedTitle = decompress(title);\r\n\tconst decompressedText = decompress(text);\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<p>{decompressedTitle}</p>\r\n\t\t\t<p>{decompressedText}</p>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Manifesto;","import React from 'react';\r\nimport {\r\n\tBrowserRouter as Router,\r\n\tRoute,\r\n\tSwitch\r\n} from \"react-router-dom\";\r\n\r\nimport Home from \"./pages/Home\";\r\nimport Manifesto from \"./pages/Manifesto\";\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<Router>\r\n\t\t\t<Switch>\r\n\t\t\t\t<Route exact path=\"/\" component={Home}/>\r\n\t\t\t\t<Route path=\"/:data\" component={Manifesto}/>\r\n\t\t\t</Switch>\r\n\t\t</Router>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}